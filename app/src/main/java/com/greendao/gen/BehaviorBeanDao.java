package com.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.solamly.solamly.module.greendao.BehaviorBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEHAVIOR_BEAN".
*/
public class BehaviorBeanDao extends AbstractDao<BehaviorBean, Void> {

    public static final String TABLENAME = "BEHAVIOR_BEAN";

    /**
     * Properties of entity BehaviorBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Behavior = new Property(0, String.class, "behavior", false, "BEHAVIOR");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Num = new Property(2, int.class, "num", false, "NUM");
        public final static Property BehaviorId = new Property(3, long.class, "behaviorId", false, "BEHAVIOR_ID");
    }

    private Query<BehaviorBean> userBean_BehaviorBeenQuery;

    public BehaviorBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BehaviorBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEHAVIOR_BEAN\" (" + //
                "\"BEHAVIOR\" TEXT," + // 0: behavior
                "\"TYPE\" TEXT," + // 1: type
                "\"NUM\" INTEGER NOT NULL ," + // 2: num
                "\"BEHAVIOR_ID\" INTEGER NOT NULL );"); // 3: behaviorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEHAVIOR_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BehaviorBean entity) {
        stmt.clearBindings();
 
        String behavior = entity.getBehavior();
        if (behavior != null) {
            stmt.bindString(1, behavior);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
        stmt.bindLong(3, entity.getNum());
        stmt.bindLong(4, entity.getBehaviorId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BehaviorBean entity) {
        stmt.clearBindings();
 
        String behavior = entity.getBehavior();
        if (behavior != null) {
            stmt.bindString(1, behavior);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
        stmt.bindLong(3, entity.getNum());
        stmt.bindLong(4, entity.getBehaviorId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BehaviorBean readEntity(Cursor cursor, int offset) {
        BehaviorBean entity = new BehaviorBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // behavior
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.getInt(offset + 2), // num
            cursor.getLong(offset + 3) // behaviorId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BehaviorBean entity, int offset) {
        entity.setBehavior(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNum(cursor.getInt(offset + 2));
        entity.setBehaviorId(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BehaviorBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BehaviorBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(BehaviorBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "behaviorBeen" to-many relationship of UserBean. */
    public List<BehaviorBean> _queryUserBean_BehaviorBeen(long behaviorId) {
        synchronized (this) {
            if (userBean_BehaviorBeenQuery == null) {
                QueryBuilder<BehaviorBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BehaviorId.eq(null));
                userBean_BehaviorBeenQuery = queryBuilder.build();
            }
        }
        Query<BehaviorBean> query = userBean_BehaviorBeenQuery.forCurrentThread();
        query.setParameter(0, behaviorId);
        return query.list();
    }

}
